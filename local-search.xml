<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>20、BeanFactory API</title>
    <link href="/7ff6e852/"/>
    <url>/7ff6e852/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring Framework</category>
      
      <category>入门</category>
      
      <category>核心技术</category>
      
      <category>IoC容器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring,Spring Framework,入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>19、ApplicationContext的附加功能</title>
    <link href="/ba168e02/"/>
    <url>/ba168e02/</url>
    
    <content type="html"><![CDATA[<h2 id="Web应用程序中的ApplicationContext实例化的便捷方式">Web应用程序中的ApplicationContext实例化的便捷方式</h2>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring Framework</category>
      
      <category>入门</category>
      
      <category>核心技术</category>
      
      <category>IoC容器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring,Spring Framework,入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>18、注册LoadTimeWeaver</title>
    <link href="/88b1c8dd/"/>
    <url>/88b1c8dd/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring Framework</category>
      
      <category>入门</category>
      
      <category>核心技术</category>
      
      <category>IoC容器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring,Spring Framework,入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>17、环境抽象</title>
    <link href="/d742da52/"/>
    <url>/d742da52/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring Framework</category>
      
      <category>入门</category>
      
      <category>核心技术</category>
      
      <category>IoC容器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring,Spring Framework,入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>16、基于Java的容器配置</title>
    <link href="/64cf65f/"/>
    <url>/64cf65f/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring Framework</category>
      
      <category>入门</category>
      
      <category>核心技术</category>
      
      <category>IoC容器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring,Spring Framework,入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>15、使用JSR 330标准注解</title>
    <link href="/17d23033/"/>
    <url>/17d23033/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring Framework</category>
      
      <category>入门</category>
      
      <category>核心技术</category>
      
      <category>IoC容器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring,Spring Framework,入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>14、类路径扫描和托管组件</title>
    <link href="/7eefb566/"/>
    <url>/7eefb566/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring Framework</category>
      
      <category>入门</category>
      
      <category>核心技术</category>
      
      <category>IoC容器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring,Spring Framework,入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>13、基于注解的容器配置</title>
    <link href="/db8fd3f5/"/>
    <url>/db8fd3f5/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring Framework</category>
      
      <category>入门</category>
      
      <category>核心技术</category>
      
      <category>IoC容器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring,Spring Framework,入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>12、容器扩展点</title>
    <link href="/496cd36b/"/>
    <url>/496cd36b/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring Framework</category>
      
      <category>入门</category>
      
      <category>核心技术</category>
      
      <category>IoC容器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring,Spring Framework,入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11、Bean定义继承</title>
    <link href="/d7c65eb4/"/>
    <url>/d7c65eb4/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring Framework</category>
      
      <category>入门</category>
      
      <category>核心技术</category>
      
      <category>IoC容器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring,Spring Framework,入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10、自定义Bean的性质</title>
    <link href="/17514971/"/>
    <url>/17514971/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring Framework</category>
      
      <category>入门</category>
      
      <category>核心技术</category>
      
      <category>IoC容器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring,Spring Framework,入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>9、Bean作用域</title>
    <link href="/22692818/"/>
    <url>/22692818/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring Framework</category>
      
      <category>入门</category>
      
      <category>核心技术</category>
      
      <category>IoC容器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring,Spring Framework,入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8、依赖关系</title>
    <link href="/639e8e28/"/>
    <url>/639e8e28/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring Framework</category>
      
      <category>入门</category>
      
      <category>核心技术</category>
      
      <category>IoC容器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring,Spring Framework,入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7、Bean概览</title>
    <link href="/4cd6495d/"/>
    <url>/4cd6495d/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring Framework</category>
      
      <category>入门</category>
      
      <category>核心技术</category>
      
      <category>IoC容器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring,Spring Framework,入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6、容器概览</title>
    <link href="/4573540c/"/>
    <url>/4573540c/</url>
    
    <content type="html"><![CDATA[<h1>Container Overview</h1><p><code>org.springframework.context.ApplicationContext</code>接口代表Spring IoC容器，负责实例化、配置和组装bean。容器通过读取配置元数据来获取实例化、配置和组装对象的指令。配置元数据可以用XML、Java注解或者Java代码表示。它允许您表达组成应用程序的对象以及这些对象之间的复杂相互依赖关系。</p><p>Spring提供了几个<code>ApplicaitonContext</code>接口的实现。在独立应用程序中，通常是创建<code>ClassPathXmlApplicationContext</code>或<code>FileSystemXmlApplicationContext</code>的实例。虽然XML一直是定义配置元数据的传统格式，但您可以通过提供少量的XML配置来指示容器使用Java注解或代码作为元数据格式，从而声明性地启用对这些附加元数据格式的支持。</p><p>在大多数应用程序场景中，通常不需要显示的用户代码来实例化一个或多个Spring IoC容器。例如，在一个web应用程序场景中，通常只需要在应用程序的<code>web.xml</code>文件中添加简单的八行左右的样板式的web描述符XML，就可以完成容器的实例化（参见<a href="/ba168e02#">Web应用程序中的ApplicationContext实例化的便捷方式</a>）。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring Framework</category>
      
      <category>入门</category>
      
      <category>核心技术</category>
      
      <category>IoC容器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring,Spring Framework,入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5、Spring IoC容器和Bean简介</title>
    <link href="/78a192b8/"/>
    <url>/78a192b8/</url>
    
    <content type="html"><![CDATA[<h1>Instroduction to the Spring IoC Container and Beans</h1><p>这一章讨论Spring Framework实现的控制反转（IoC）原则。IoC也被称为依赖注入（DI）。这是一个过程，对象仅通过构造函数参数、工厂方法的参数或在构造对象实例或从工厂方法返回后在对象实例上设置的属性来定义其依赖项（即它们使用的其他对象）。然后容器创建bean时注入这些依赖项。这个过程基本上与bean本身通过直接构造类或Service Locator模式等机制来控制其依赖项的实例化或定位是相反的（因此称为控制反转）。</p><p><code>org.springframework.beans</code>和<code>org.springframework.context</code>包是Spring Framework的IoC容器的基础。<code>BeanFactory</code>接口提供了一个高级配置机制，能够管理任何类型的对象。<code>ApplicationContext</code>是<code>BeanFactory</code>的子接口。它添加了以下功能：</p><ul class="lvl-0"><li class="lvl-2"><p>更容易与Spring的AOP特性集成</p></li><li class="lvl-2"><p>消息资源处理（用于国际化）</p></li><li class="lvl-2"><p>事件发布</p></li><li class="lvl-2"><p>用于Web应用程序的<code>WebApplicationContext</code>等应用程序层特定上下文。</p></li></ul><p>简而言之，<code>BeanFactory</code>提供了配置框架和基本功能，而<code>ApplicationContext</code>添加了更多企业级特定功能。<code>ApplicationContext</code>是<code>BeanFactory</code>的完整超集并且在本章中专门用于描述Spring的IoC容器。如果想了解如何使用<code>BeanFactory</code>而不是<code>ApplicationContext</code>，请查看涵盖<a href="/7ff6e852"><code>BeanFactory</code>API</a>的章节。</p><p>在Spring中，由Spring IoC容器管理并构成应用程序骨干的对象被称为bean。Bean是由Spring IoC容器实例化、组装和管理的对象。否则，Bean只是应用程序中的众多对象之一。Bean及其之间的依赖关系在容器使用的配置元数据中反应出来。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring Framework</category>
      
      <category>入门</category>
      
      <category>核心技术</category>
      
      <category>IoC容器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring,Spring Framework,入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4、The IoC Container</title>
    <link href="/b346a7e3/"/>
    <url>/b346a7e3/</url>
    
    <content type="html"><![CDATA[<h1>The IoC Container</h1><p>本章介绍Spring的控制反转（IoC）容器。</p><h1>Section Summary</h1><ul class="lvl-0"><li class="lvl-2"><p><a href="/78a192b8">Spring IoC容器和Bean简介</a></p></li><li class="lvl-2"><p><a href="/4573540c">容器概览</a></p></li><li class="lvl-2"><p><a href="/4cd6495d">Bean概览</a></p></li><li class="lvl-2"><p><a href="/639e8e28">依赖关系</a></p></li><li class="lvl-2"><p><a href="/22692818">Bean作用域</a></p></li><li class="lvl-2"><p><a href="/17514971">自定义Bean的性质</a></p></li><li class="lvl-2"><p><a href="/d7c65eb4">Bean定义继承</a></p></li><li class="lvl-2"><p><a href="/496cd36b">容器扩展点</a></p></li><li class="lvl-2"><p><a href="/db8fd3f5">基于注解的容器配置</a></p></li><li class="lvl-2"><p><a href="/7eefb566">类路径扫描和托管组件</a></p></li><li class="lvl-2"><p><a href="/17d23033">使用JSR 330标准注解</a></p></li><li class="lvl-2"><p><a href="/64cf65f">基于Java的容器配置</a></p></li><li class="lvl-2"><p><a href="/d742da52">环境抽象</a></p></li><li class="lvl-2"><p><a href="/88b1c8dd">注册LoadTimeWeaver</a></p></li><li class="lvl-2"><p><a href="/ba168e02">ApplicationContext的附加功能</a></p></li><li class="lvl-2"><p><a href="/7ff6e852">BeanFactory API</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring Framework</category>
      
      <category>入门</category>
      
      <category>核心技术</category>
      
      <category>IoC容器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring,Spring Framework,入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3、核心技术</title>
    <link href="/8f8103b7/"/>
    <url>/8f8103b7/</url>
    
    <content type="html"><![CDATA[<h1>Core Technologies</h1><p>这部分参考文档涵盖了对于Spring Framework绝对不可或缺的所有技术。</p><p>首先，其中最重要的是Spring Framework的控制反转（IoC）容器。在全面介绍Spring Framework的IoC容器之后，全面介绍了Spring Framework的面向切面编程（AOP）技术。Spring Framework有自己的AOP框架，它在概念上很容易理解，并且成功地解决了Java企业编程中80%的AOP需求。</p><p>提供Spring与AspectJ整合的内容（AspectJ是目前在Java企业领域中功能最丰富并且最成熟的AOP实现）。</p><p>AOT<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="AOT代表“Ahead-Of-Time”，它是一种编译技术，用于在应用程序运行之前对代码进行静态编译。与传统的即时编译（JIT，Just-In-Time）相反，AOT编译发生在应用程序部署或构建阶段，而不是在运行时。">[1]</span></a></sup>处理被用于提前优化您的应用程序。它通常用于使用GraalVM<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="GraalVM是一个支持AOT编译的多语言虚拟机，它可以用于将Java等代码编译为本机机器码，从而提供更好的性能和资源利用率。">[2]</span></a></sup>进行本机映像部署。</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>AOT代表“Ahead-Of-Time”，它是一种编译技术，用于在应用程序运行之前对代码进行静态编译。与传统的即时编译（JIT，Just-In-Time）相反，AOT编译发生在应用程序部署或构建阶段，而不是在运行时。<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>GraalVM是一个支持AOT编译的多语言虚拟机，它可以用于将Java等代码编译为本机机器码，从而提供更好的性能和资源利用率。<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring Framework</category>
      
      <category>入门</category>
      
      <category>核心技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring,Spring Framework,入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日志打印规范</title>
    <link href="/966c1abf/"/>
    <url>/966c1abf/</url>
    
    <content type="html"><![CDATA[<h2 id="1-什么是日志">1. 什么是日志</h2><p>在后端开发中，日志（log）是指记录应用程序运行时状态、事件和相关信息的记录条目。它是开发人员用来了解应用程序在运行过程中发生的事情的重要工具。</p><h2 id="2-日志的作用">2. 日志的作用</h2><ol><li class="lvl-3"><p>调试和故障排查：日志记录有助于开发人员在应用程序中定位和解决问题。通过查看日志，开发人员可以了解应用程序的内部状态、变量值、错误信息等，以便快速识别和调试故障。</p></li><li class="lvl-3"><p>监控和性能优化：通过日志记录应用程序的关键指标、性能数据和异常情况，开发人员可以监视应用程序的运行状况，并进行性能分析和优化。日志可以提供关于应用程序的各个方面的信息，如响应时间、数据库查询、缓存命中率等。</p></li><li class="lvl-3"><p>安全和合规性：日志记录在安全和合规性方面起着重要作用。通过记录安全事件、访问日志、错误日志等，开发人员可以追踪和审计系统的操作，检测潜在的安全威胁，并满足合规性要求。</p></li><li class="lvl-3"><p>数据分析和业务洞察：日志记录可以提供有关用户行为、业务活动和系统操作的数据。这些日志数据可以用于分析用户行为模式、业务趋势、故障发生的原因等，从而为业务决策和优化提供洞察和依据。</p></li></ol><h2 id="3-java中如何打印日志">3. java中如何打印日志</h2><h3 id="3-1-什么时候打印日志">3.1. 什么时候打印日志</h3><ol><li class="lvl-3"><p>调试信息：在开发和测试阶段，可以打印详细的调试信息，包括变量的值、方法的执行流程等，以帮助开发人员理解代码的执行过程和查找潜在的错误。</p></li><li class="lvl-3"><p>异常信息：在发生异常时，可以打印异常信息，包括异常的类型、堆栈轨迹等，以便定位和解决问题。</p></li><li class="lvl-3"><p>业务逻辑：在关键业务逻辑处打印日志，帮助跟踪业务流程的执行，确保业务逻辑的正确性。</p></li><li class="lvl-3"><p>用户操作：记录用户的操作行为，例如用户登录、注册、提交表单等，帮助追踪用户行为和快速发现问题。</p></li><li class="lvl-3"><p>性能分析：记录方法的执行时间和耗时，帮助分析程序的性能瓶颈，优化程序性能。</p></li><li class="lvl-3"><p>重要事件：记录重要的系统事件，例如系统启动、关闭、定时任务等，以便监控系统的运行状态。</p></li><li class="lvl-3"><p>安全审计：记录敏感操作，例如用户权限的变更、数据访问等，以便进行安全审计和追踪。</p></li></ol><h3 id="3-2-使用Logback日志框架记录日志（基于Spring-Boot的项目）">3.2. 使用Logback日志框架记录日志（基于Spring Boot的项目）</h3><p>日志级别：<code>TRACE &lt; DEBUG &lt; INFO &lt;  WARN &lt; ERROR </code></p><h4 id="3-2-1-引入依赖">3.2.1. 引入依赖</h4><p>在Spring Boot项目中，Logback是默认的日志框架，不需要额外引入依赖。</p><p>如果不是Spring Boot项目而是普通的Java项目，则需引入Logback依赖。</p><ol><li class="lvl-3"><p>maven</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Logback Core --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- Logback Classic --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li class="lvl-3"><p>Gradle（Kotlin DSL）</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">dependencies &#123;<br>    <span class="hljs-comment">// Logback Core</span><br>    implementation(<span class="hljs-string">&quot;ch.qos.logback:logback-core:1.4.5&quot;</span>)<br>    <br>    <span class="hljs-comment">// Logback Classic</span><br>    implementation(<span class="hljs-string">&quot;ch.qos.logback:logback-classic:1.4.5&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="3-2-2-logback-spring-xml">3.2.2.  logback-spring.xml</h4><p>在<code>src/main/resources</code>目录下创建名为<code>logback-spring.xml</code>的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- scan:当此属性设置为true时，配置文档如果发生改变，将会被重新加载，默认值为true --&gt;</span><br><span class="hljs-comment">&lt;!-- scanPeriod:设置监测配置文档是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">scan</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">scanPeriod</span>=<span class="hljs-string">&quot;60 seconds&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 读取springboot配置文件中spring.application.name的值作为APPLICATION_NAME的值 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">springProperty</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;context&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;APPLICATION_NAME&quot;</span> <span class="hljs-attr">source</span>=<span class="hljs-string">&quot;spring.application.name&quot;</span> <span class="hljs-attr">defaultValue</span>=<span class="hljs-string">&quot;dsy&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 为Logback上下文指定一个唯一的名称，以便在日志记录中标识不同的上下文。这在多应用程序或多模块的项目中特别有用，可以区分不同应用程序或模块的日志输出。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">contextName</span>&gt;</span>$&#123;APPLICATION_NAME&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">contextName</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 日志文件路径：首先解析LOG_PATH如果有值则以其值为日志文件路径并停止向后解析，如果无值则依次向后解析取值，找到值则以其为日志文件路径。最后拼接APPLICATION_NAME --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_PATH&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;LOG_PATH:-$&#123;LOG_TEMP:-$&#123;java.io.tmpdir:-/tmp&#125;&#125;&#125;/$&#123;APPLICATION_NAME&#125;&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 日志输出格式配置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">conversionRule</span> <span class="hljs-attr">conversionWord</span>=<span class="hljs-string">&quot;clr&quot;</span> <span class="hljs-attr">converterClass</span>=<span class="hljs-string">&quot;org.springframework.boot.logging.logback.ColorConverter&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">conversionRule</span> <span class="hljs-attr">conversionWord</span>=<span class="hljs-string">&quot;wex&quot;</span> <span class="hljs-attr">converterClass</span>=<span class="hljs-string">&quot;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">conversionRule</span> <span class="hljs-attr">conversionWord</span>=<span class="hljs-string">&quot;wEx&quot;</span> <span class="hljs-attr">converterClass</span>=<span class="hljs-string">&quot;org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE_LOG_PATTERN&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;CONSOLE_LOG_PATTERN:-%clr([%contextName])&#123;cyan&#125; %clr(%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS&#125;&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t]-[%X&#123;traceId&#125;])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--配置此格式的输出样例如下--&gt;</span><br>    &lt;![CDATA[ [user] 2023-06-28 00:36:17.726  INFO 10536 --- [http-nio-8020-exec-2]-[a69040d4-96d2-495d-ba65-129096e321a7] com.alibaba.nacos.client.naming          : [SUBSCRIBE-SERVICE] service:support, group:DEFAULT_GROUP, clusters:    ]]&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE_LOG_PATTERN&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;FILE_LOG_PATTERN:-[%contextName] %d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS&#125;&#125; $&#123;LOG_LEVEL_PATTERN:-%5p&#125; $&#123;PID:- &#125; --- [%t]-[%X&#123;traceId&#125;] %-40.40logger&#123;39&#125; : %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE_LOG_CHARSET&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;FILE_LOG_CHARSET:-$&#123;file.encoding:-UTF-8&#125;&#125;&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 控制台输出 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 日志文件的格式 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>$&#123;CONSOLE_LOG_CHARSET&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>TRACE<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;INFO_FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;LOG_PATH&#125;/info.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- rollover daily 配置日志所生成的目录以及生成文件名的规则 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;LOG_PATH&#125;/info/info-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 文件大小，保留文件的个数，保留文件的总大小--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>20MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>24<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">totalSizeCap</span>&gt;</span>1GB<span class="hljs-tag">&lt;/<span class="hljs-name">totalSizeCap</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 追加方式记录日志 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 日志文件的格式 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>$&#123;FILE_LOG_CHARSET&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 此日志文件只记录info级别的 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>info<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;DEBUG_FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;LOG_PATH&#125;/debug.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- rollover daily 配置日志所生成的目录以及生成文件名的规则 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;LOG_PATH&#125;/debug/debug-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 文件大小，保留文件的个数，保留文件的总大小--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>20MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>24<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">totalSizeCap</span>&gt;</span>1GB<span class="hljs-tag">&lt;/<span class="hljs-name">totalSizeCap</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 追加方式记录日志 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 日志文件的格式 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>$&#123;FILE_LOG_CHARSET&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 此日志文件只记录debug级别的 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>debug<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;WARN_FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;LOG_PATH&#125;/warn.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- rollover daily 配置日志所生成的目录以及生成文件名的规则 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;LOG_PATH&#125;/warn/warn-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 文件大小，保留文件的个数，保留文件的总大小--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>20MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>24<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">totalSizeCap</span>&gt;</span>1GB<span class="hljs-tag">&lt;/<span class="hljs-name">totalSizeCap</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 追加方式记录日志 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 日志文件的格式 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>$&#123;FILE_LOG_CHARSET&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 此日志文件只记录warn级别的 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>warn<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 时间滚动输出 level为 ERROR 日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ERROR_FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">File</span>&gt;</span>$&#123;LOG_PATH&#125;/error.log<span class="hljs-tag">&lt;/<span class="hljs-name">File</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- rollover daily 配置日志所生成的目录以及生成文件名的规则 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;LOG_PATH&#125;/error/error-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 文件大小，保留文件的个数，保留文件的总大小--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>20MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>24<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">totalSizeCap</span>&gt;</span>1GB<span class="hljs-tag">&lt;/<span class="hljs-name">totalSizeCap</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 追加方式记录日志 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 日志文件的格式 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>$&#123;FILE_LOG_CHARSET&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 此日志文件只记录error级别的 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--开发环境:打印控制台--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dev&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 表示将根日志级别设置为 &quot;info&quot;，即只记录 info 及更高级别的日志消息。 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;DEBUG_FILE&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;INFO_FILE&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;WARN_FILE&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ERROR_FILE&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--测试环境:打印控制台和输出到文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;DEBUG_FILE&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;INFO_FILE&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;WARN_FILE&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ERROR_FILE&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--生产环境:输出到文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prod&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;DEBUG_FILE&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;INFO_FILE&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;WARN_FILE&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ERROR_FILE&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-2-3-在过滤器中打印请求和响应日志">3.2.3. 在过滤器中打印请求和响应日志</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.dsy.springcloud.common.filter;<br><br><span class="hljs-keyword">import</span> jakarta.annotation.Priority;<br><span class="hljs-keyword">import</span> jakarta.servlet.*;<br><span class="hljs-keyword">import</span> jakarta.servlet.annotation.WebFilter;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.slf4j.MDC;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.util.ContentCachingRequestWrapper;<br><span class="hljs-keyword">import</span> org.springframework.web.util.ContentCachingResponseWrapper;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Enumeration;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 请求响应打印</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> dsy</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebFilter(filterName = &quot;logFilter&quot;, urlPatterns = &quot;/*&quot;)</span><br><span class="hljs-meta">@Priority(value = 1)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>        <span class="hljs-type">ContentCachingRequestWrapper</span> <span class="hljs-variable">reqW</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContentCachingRequestWrapper</span>((HttpServletRequest) request);<br>        <span class="hljs-type">ContentCachingResponseWrapper</span> <span class="hljs-variable">resW</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContentCachingResponseWrapper</span>((HttpServletResponse) response);<br><br>        <span class="hljs-comment">// 日志打印中的请求唯一标识</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">traceId</span> <span class="hljs-operator">=</span> reqW.getHeader(<span class="hljs-string">&quot;traceId&quot;</span>);<br>        <span class="hljs-keyword">if</span> (!StringUtils.hasText(traceId)) &#123;<br>            traceId = UUID.randomUUID().toString();<br>        &#125;<br>        <span class="hljs-comment">// MDC是一个在多线程环境下，用于在日志记录中传递上下文信息的机制。它是日志框架SLF4J提供的一个重要特性。</span><br>        <span class="hljs-comment">// 这里的作用是为每一个请求分配一个唯一的UUID，并在打印在日志中。标识每个请求的日志。</span><br>        MDC.put(<span class="hljs-string">&quot;traceId&quot;</span>, traceId);<br><br>        chain.doFilter(reqW, resW);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fullUrl</span> <span class="hljs-operator">=</span> reqW.getRequestURL().append(reqW.getQueryString() == <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;?&quot;</span> + reqW.getQueryString()).toString();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">reqBody</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(reqW.getContentAsByteArray());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">resBody</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(resW.getContentAsByteArray());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fullHeader</span> <span class="hljs-operator">=</span> requestHeaders2Json(reqW);<br><br>        resW.copyBodyToResponse();<br>        log.info(<span class="hljs-string">&quot;\n&#123;&#125;-url：&#123;&#125; \n请求头：&#123;&#125; \n请求体：&#123;&#125; \n响应码：&#123;&#125; \n响应体：&#123;&#125; \ntraceId：&#123;&#125; \n耗时：&#123;&#125;&quot;</span>,<br>                reqW.getMethod(), fullUrl, fullHeader, reqBody, resW.getStatus(), resBody,<br>                traceId, System.currentTimeMillis() - startTime);<br>        MDC.remove(<span class="hljs-string">&quot;traceId&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">requestHeaders2Json</span><span class="hljs-params">(ContentCachingRequestWrapper reqW)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;&#123;&quot;</span>);<br>        Enumeration&lt;String&gt; headerNameEnum = reqW.getHeaderNames();<br>        <span class="hljs-keyword">while</span> (headerNameEnum.hasMoreElements()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> headerNameEnum.nextElement();<br>            sb.append(<span class="hljs-string">&quot;\&quot;&quot;</span>).append(name).append(<span class="hljs-string">&quot;\&quot;&quot;</span>).append(<span class="hljs-string">&quot;:&quot;</span>).append(<span class="hljs-string">&quot;\&quot;&quot;</span>).append(reqW.getHeader(name)).append(<span class="hljs-string">&quot;\&quot;&quot;</span>);<br>            <span class="hljs-keyword">if</span> (headerNameEnum.hasMoreElements()) &#123;<br>                sb.append(<span class="hljs-string">&quot;, &quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                sb.append(<span class="hljs-string">&quot;&#125;&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-4-Spring-Cloud-OpenFeign自定义打印请求和响应日志">3.2.4. Spring Cloud OpenFeign自定义打印请求和响应日志</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.dsy.springcloud.common.feign;<br><br><span class="hljs-keyword">import</span> com.dsy.springcloud.common.constant.MDCKey;<br><span class="hljs-keyword">import</span> feign.Request;<br><span class="hljs-keyword">import</span> feign.Response;<br><span class="hljs-keyword">import</span> feign.Util;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> feign.Util.UTF_8;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> feign.Util.decodeOrDefault;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 复制自io.github.openfeign:feign-slf4j:12.1的feign.slf4j.Slf4jLogger，</span><br><span class="hljs-comment"> * 在logAndRebufferResponse方法中加入自定义日志打印逻辑，并且设置feign日志</span><br><span class="hljs-comment"> * 级别为Level.FULL。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> dsy</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomLogger</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">feign</span>.Logger &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Logger logger;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomLogger</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>(feign.Logger.class);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomLogger</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span> &#123;<br>        <span class="hljs-built_in">this</span>(LoggerFactory.getLogger(clazz));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomLogger</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>(LoggerFactory.getLogger(name));<br>    &#125;<br><br>    CustomLogger(Logger logger) &#123;<br>        <span class="hljs-built_in">this</span>.logger = logger;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logRequest</span><span class="hljs-params">(String configKey, Level logLevel, Request request)</span> &#123;<br>        <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>            <span class="hljs-built_in">super</span>.logRequest(configKey, logLevel, request);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Response <span class="hljs-title function_">logAndRebufferResponse</span><span class="hljs-params">(String configKey,</span><br><span class="hljs-params">                                              Level logLevel,</span><br><span class="hljs-params">                                              Response response,</span><br><span class="hljs-params">                                              <span class="hljs-type">long</span> elapsedTime)</span><br>            <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.logAndRebufferResponse(configKey, logLevel, response, elapsedTime);<br>        &#125;<br><br>        <span class="hljs-comment">//打印请求响应详细信息</span><br><br>        <span class="hljs-comment">// 请求体</span><br>        <span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> response.request();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">bodyReq</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (request.body() != <span class="hljs-literal">null</span>) &#123;<br>            bodyReq =<br>                    request.charset() != <span class="hljs-literal">null</span><br>                            ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(request.body(), request.charset())<br>                            : <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">// 响应体</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">bodyRes</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">byte</span>[] bodyData = <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> response.status();<br>        <span class="hljs-keyword">if</span> (response.body() != <span class="hljs-literal">null</span> &amp;&amp; !(status == <span class="hljs-number">204</span> || status == <span class="hljs-number">205</span>)) &#123;<br>            <span class="hljs-comment">// HTTP 204 No Content &quot;...response MUST NOT include a message-body&quot;</span><br>            <span class="hljs-comment">// HTTP 205 Reset Content &quot;...response MUST NOT include an entity&quot;</span><br>            bodyData = Util.toByteArray(response.body().asInputStream());<br>            <span class="hljs-type">int</span> <span class="hljs-variable">bodyLength</span> <span class="hljs-operator">=</span> bodyData.length;<br>            <span class="hljs-keyword">if</span> (bodyLength &gt; <span class="hljs-number">0</span>) &#123;<br>                bodyRes = decodeOrDefault(bodyData, UTF_8, <span class="hljs-string">&quot;Binary data&quot;</span>);<br>            &#125;<br>        &#125;<br><br><br>        log.info(<span class="hljs-string">&quot;\n外部接口&#123;&#125;访问 \n&#123;&#125;-url：&#123;&#125; \n请求头：&#123;&#125; \n请求体：&#123;&#125; \n响应码：&#123;&#125; \n响应头：&#123;&#125; \n响应体：&#123;&#125; \ntraceId：&#123;&#125; \n耗时：&#123;&#125;&quot;</span>,<br>                configKey, request.httpMethod(), request.url(),<br>                request.headers(), bodyReq,<br>                status, response.headers(), bodyRes,<br>                request.headers().get(<span class="hljs-string">&quot;traceId&quot;</span>), elapsedTime);<br><br>        <span class="hljs-comment">// 响应体的流仅可读取一次，所以重新构建响应体返回。</span><br>        <span class="hljs-keyword">return</span> response.toBuilder().body(bodyData).build();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String configKey, String format, Object... args)</span> &#123;<br>        <span class="hljs-comment">// Not using SLF4J&#x27;s support for parameterized messages (even though it would be more efficient)</span><br>        <span class="hljs-comment">// because it would</span><br>        <span class="hljs-comment">// require the incoming message formats to be SLF4J-specific.</span><br>        <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>            logger.info(String.format(methodTag(configKey) + format, args));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    Level <span class="hljs-title function_">feignLoggerLevel</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Level.FULL;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码结构与规范</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码结构与规范</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2、概述</title>
    <link href="/785d8438/"/>
    <url>/785d8438/</url>
    
    <content type="html"><![CDATA[<h1>Spring Framework Overview</h1><p>Spring使创建Java企业应用程序变得简单。它提供在企业环境中使用Java语言所需的一切，支持将Groovy和Kotlin作为在JVM上的替代语言，并且可以根据应用程序的需要灵活地创建多种架构。从Spring Framework 6.0开始，Spring需要Java 17+。</p><p>Spring支持广泛的应用场景。在大型企业中，应用程序往往存在很长时间，并且必须运行在JDK和应用服务器上，其升级周期不受开发人员的控制。其他人可能作为嵌入服务器的单个jar运行，可能在云环境中，还有一些可能是不需要服务器的独立应用程序（例如批处理和集成工作负载）。</p><p>Spring是开源的。它有一个庞大而活跃的社区，可以根据各种实际用例提供持续的反馈。这帮助Spring在很长一段时间内成功发展。</p><h2 id="我们所说的“Spring”是什么意思">我们所说的“Spring”是什么意思</h2><p>“Spring”一词在不同的上下文中意味着不同的事物。它可以用来指代Spring Framework项目本身，这就是一切的开始。随着时间的推移，其他Spring项目已经建立在Spring Framework之上。大多数情况下，当人们说“Spring”时，他们指的是整个项目系列。本参考文档侧重于基础：Spring Framework本身。</p><p>Spring Framework是分成模块的。应用程序可以选择它们需要的模块。核心是核心容器的模块，包括配置模型和依赖注入机制。除此之外，Spring Framework还为不同的应用程序架构提供了基础支持，包括消息传递，数据的事务和持久性，以及web。它还包括基于Servlet的Spring MVC Web框架，以及并行的Spring WebFlux反应式Web框架。</p><p>一个关于模块的说明：Spring的框架jar包们允许部署到JDK9的模块路径（“Jigsaw”<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Jigsaw是OpenJDK项目下的一个子项目。这个项目旨在在Java语言中引入模块系统，及其在JDK源码和Java运行时中的实现。简单说其具体实现就是JDK9中的模块系统。具体介绍可查看官方文档介绍：https://openjdk.org/projects/jigsaw">[1]</span></a></sup>）。为了在支持Jigsaw的应用程序中使用，Spring Framework 5 jar带有“Automatic-Module-Name”<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="Automatic-Module-Name 是一个 jar 包清单文件的条目，它允许开发人员为不包含 `module-info.java` 的 jar 包定义模块名称。如果 jar 包中没有 Automatic-Module-Name条目，JDK 9 会自动使用 jar 文件的文件名（不含扩展名）作为模块名称。例如：可以在spring-core-6.0.8.jar中的META-INF目录的MANIFEST.MF文件中找到`Automatic-Module-Name: spring.core`。">[2]</span></a></sup>清单条目，这些条目定义了独立于jar工件的稳定语言级模块名称（“Spring.core“、”Spring.context“等）（jar遵循相同的命名模式，使用“-”而不是“.”，例如“Spring-core”和“Spring-context”）。当然，Spring的框架jar可以用在JDK8和9+的类路径上正常工作。</p><h2 id="Spring和Spring-Framework的历史">Spring和Spring Framework的历史</h2><p>Spring作为应对早期J2EE的复杂性的产品于2003年应运而生。虽然有些人认为Java EE和它的现代的继任者Jakarta EE与Spring存在竞争关系，它们实际上是互补的。Spring编程模型不包含Jakarta EE平台规范；Spring从传统EE规范所涵盖的所有相关规范、标准和技术中精选的个别规范：</p><ul class="lvl-0"><li class="lvl-2"><p>Servlet API (<a href="https://jcp.org/en/jsr/detail?id=340">JSR 340</a><sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="JSR是Java Specification Requests的缩写，意思是Java规范提案，是指向JCP（Java Community Process）提出新增一个标准化技术规范的正式请求。340是指这个提案的编号。">[3]</span></a></sup>)</p></li><li class="lvl-2"><p>WebSocket API (<a href="https://www.jcp.org/en/jsr/detail?id=356">JSR 356</a>)</p></li><li class="lvl-2"><p>Concurrency Utilities (<a href="https://www.jcp.org/en/jsr/detail?id=236">JSR 236</a>)</p></li><li class="lvl-2"><p>JSON Binding API (<a href="https://jcp.org/en/jsr/detail?id=367">JSR 367</a>)</p></li><li class="lvl-2"><p>Bean Validation (<a href="https://jcp.org/en/jsr/detail?id=303">JSR 303</a>)</p></li><li class="lvl-2"><p>JPA (<a href="https://jcp.org/en/jsr/detail?id=338">JSR 338</a>)</p></li><li class="lvl-2"><p>JMS (<a href="https://jcp.org/en/jsr/detail?id=914">JSR 914</a>)</p></li><li class="lvl-2"><p>如果需要的话，还可以使用JTA/JCA<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="在Spring框架中，JTA（Java Transaction API）和JCA（Java Connector Architecture）是用于事务协调和连接企业信息系统（EIS）的两个重要技术。Spring支持使用JTA管理分布式事务，通过JTA事务管理器，Spring可以在多个资源之间执行分布式事务，并确保事务的ACID（原子性、一致性、隔离性、持久性）属性得到维护。Spring还提供了多个JTA实现，例如Atomikos、Bitronix和JBoss Transaction。另一方面，Spring也支持使用JCA连接到EIS。 Spring为各种EIS提供了适配器，使得使用Spring的应用程序可以通过标准化的接口与EIS集成，例如JDBC和JMS适配器。使用Spring的JCA适配器，可以在Spring应用程序中使用像JDBC和JMS这样的标准API连接到EIS。">[4]</span></a></sup>设置来进行事务协调。</p></li></ul><p>Spring还支持依赖注入（<a href="https://www.jcp.org/en/jsr/detail?id=330">JSR 330</a>）和通用注解（<a href="https://jcp.org/en/jsr/detail?id=250">JSR 250</a>）规范。应用程序开发人员可以选择使用它们来代替Spring框架提供的特定于Spring的机制。最初，那些（那些指JSR 330和JSR 250）是基于通用<code>javax</code>包的。</p><p>从Spring Framework 6.0起，Spring已经升级到Jakarta EE 9（例如：Servlet 5.0+，JPA 3.0+），基于<code>Jakarta</code>命名空间代替传统的<code>javax</code>包。以EE 9作为最低要求并且已经支持EE 10。Spring已经做好为进一步演化的Jakarta EE API提供开箱即用的支持的准备。Spring Framework 6.0完全兼容Tomcat 10.1，Jetty 11和Undertow 2.3作为web服务器。也与Hibernate ORM 6.1兼容。</p><p>随着时间的推移，Java/Jakarta EE在应用程序开发中的角色发生了变化。在J2EE和Spring早期，应用程序是为了部署到一个应用服务器而创建的。如今，在Spring Boot的帮助下，应用程序以DevOps和云友好的方式创建，Servlet容器被嵌入其中，而且轻松易改。从Spring Framework 5开始，一个WebFlux应用程序甚至不直接使用Servlet API并且可以运行在不是Servlet容器的服务器上（如Netty）。</p><p>Spring继续创新和演进。除了Spring Framework外，还有其他项目，例如Spring Boot，Spring Security，Spring Data，Spring Cloud，Spring Batch等。重要的是记住每个项目都有自己的源码仓库，问题追踪器，发布节奏。请访问<a href="spring.io/projects">spring.io/projects</a>查看完整的Spring项目列表。</p><h2 id="设计理念">设计理念</h2><p>当您了解一个框架时，重要的是不仅要了解它的用途，还要了解它遵循的原则。以下是Spring框架的指导原则：</p><ul class="lvl-0"><li class="lvl-2"><p>在每个层次上提供选择。Spring允许您尽可能地延迟设计决策。例如，您可以通过配置切换持久性提供程序，而无需更改代码。对于许多其他基础结构问题和与第三方APIs的集成，也是如此。</p></li><li class="lvl-2"><p>容纳不同的观点。Spring拥抱灵活性，并且对于食物应该如何完成并不固执己见。它支持多种不同角度的应用需求。</p></li><li class="lvl-2"><p>保持强大的向后兼容性。Spring的演变经过精心管理，在版本之间几乎没有发生重大变化。Spring支持一系列精心挑选的JDK版本和第三方库，以便维护依赖于Spring的应用程序和库。</p></li><li class="lvl-2"><p>关心API设计。Spring团队投入了大量的思考和时间来制作直观且可以跨多个版本和多年的API。</p></li><li class="lvl-2"><p>为代码质量设定高标准。Spring框架非常强调有意义、最新且最准确的javadoc。它是极少数可以声称干净的代码结构且包之间没有循环依赖关系的项目之一。</p></li></ul><h2 id="反馈和贡献">反馈和贡献</h2><p>对于操作方法问题或诊断或调试问题，我们建议使用Stack Overflow。单击<a href="https://stackoverflow.com/questions/tagged/spring+or+spring-mvc+or+spring-aop+or+spring-jdbc+or+spring-r2dbc+or+spring-transactions+or+spring-annotations+or+spring-jms+or+spring-el+or+spring-test+or+spring+or+spring-orm+or+spring-jmx+or+spring-cache+or+spring-webflux+or+spring-rsocket?tab=Newest">此处</a>获取要在Stack Overflow上使用的建议标签列表。如果您相当确定Spring框架中存在问题或想要建议某个功能，请使用<a href="https://github.com/spring-projects/spring-framework/issues">GitHub Issues</a>。</p><p>如果您有解决方案或建议的修复方案，您可以在<a href="https://github.com/spring-projects/spring-framework">Github</a>上提交拉取请求（Request Pull）。但是，请记住，除了最简单的问题外，我们希望您首先在问题跟踪器中提交一个工单（Ticket），在那里进行讨论并留下记录供将来参考。</p><p>更多细节请参阅项目的顶层页面上的<a href="https://github.com/spring-projects/spring-framework/blob/main/CONTRIBUTING.md">CONTRIBUTING</a>。</p><h2 id="入门">入门</h2><p>如果您刚开始学习Spring，您可能希望通过创建一个基于<a href="https://spring.io/projects/spring-boot">Spring Boot</a>的应用程序来开始使用Spring框架。Spring Boot提供了一种快速（并且偏向特定观点：指在某些方面做出了一些预设和默认值）的方式来创建一个生产就绪的基于Spring的应用程序。它基于Spring Framework，倾向于约定优于配置，并旨在让您尽快上手。</p><p>您可以使用<a href="https://start.spring.io/">start.spring.io</a>来生成一个基本的项目，或者按照<a href="https://spring.io/guides">&quot;Getting Started&quot;指南</a>之一来操作，比如<a href="https://spring.io/guides/gs/rest-service/">&quot;Getting Started Building a RESTful Web Service&quot;</a>。除了更易于理解，这些指南还着重于具体任务，并且大部分都是基于Spring Boot的。它们还涵盖了Spring系列中的其他项目，当您解决特定问题时可能会考虑到这些项目。</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>Jigsaw是OpenJDK项目下的一个子项目。这个项目旨在在Java语言中引入模块系统，及其在JDK源码和Java运行时中的实现。简单说其具体实现就是JDK9中的模块系统。具体介绍可查看官方文档介绍：<a href="https://openjdk.org/projects/jigsaw">https://openjdk.org/projects/jigsaw</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>Automatic-Module-Name 是一个 jar 包清单文件的条目，它允许开发人员为不包含 <code>module-info.java</code> 的 jar 包定义模块名称。如果 jar 包中没有 Automatic-Module-Name条目，JDK 9 会自动使用 jar 文件的文件名（不含扩展名）作为模块名称。例如：可以在spring-core-6.0.8.jar中的META-INF目录的MANIFEST.MF文件中找到<code>Automatic-Module-Name: spring.core</code>。<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>JSR是Java Specification Requests的缩写，意思是Java规范提案，是指向JCP（Java Community Process）提出新增一个标准化技术规范的正式请求。340是指这个提案的编号。<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>在Spring框架中，JTA（Java Transaction API）和JCA（Java Connector Architecture）是用于事务协调和连接企业信息系统（EIS）的两个重要技术。Spring支持使用JTA管理分布式事务，通过JTA事务管理器，Spring可以在多个资源之间执行分布式事务，并确保事务的ACID（原子性、一致性、隔离性、持久性）属性得到维护。Spring还提供了多个JTA实现，例如Atomikos、Bitronix和JBoss Transaction。另一方面，Spring也支持使用JCA连接到EIS。 Spring为各种EIS提供了适配器，使得使用Spring的应用程序可以通过标准化的接口与EIS集成，例如JDBC和JMS适配器。使用Spring的JCA适配器，可以在Spring应用程序中使用像JDBC和JMS这样的标准API连接到EIS。<a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring Framework</category>
      
      <category>入门</category>
      
      <category>核心技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring,Spring Framework,入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1、README</title>
    <link href="/b5385ca/"/>
    <url>/b5385ca/</url>
    
    <content type="html"><![CDATA[<p>本分类（<a href="https://1515biubiubiu.github.io/categories/Java/">Java</a> &gt; <a href="https://1515biubiubiu.github.io/categories/Java/Spring-Framework/">Spring Framework</a> &gt; <a href="https://1515biubiubiu.github.io/categories/Java/Spring-Framework/%E5%85%A5%E9%97%A8/">入门</a>）的内容是以<a href="https://spring.io/">Spring官网</a>的<a href="https://docs.spring.io/spring-framework/docs/6.0.11/reference/html/">Spring Framework的参考文档-6.0.11</a>为基础（使用6.0.11版本的原因是：本文开始更新时Spring Framework的当前GA版本为6.0.11）。主要内容为对其的翻译和学习，以及一些本人学习过程中的理解。</p><p>本分类文章的目的旨在对Spring有更全面的认识，并且提升一点点的英文水平。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring Framework</category>
      
      <category>入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring,Spring Framework,入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
